{"version":3,"sources":["PostComment/PostComment_Navigation/PostComment_Navigation.js","GifBox/GifBox.js","PostComment/PostComment.js","PostPosted/PostPosted.js","App.js","index.js"],"names":["PostComment_Navigation","props","convertclassToString","arr","join","spanArray","nav_items","map","nav_item","id","className","classes","span","onClick","i","text","crossOnClick","GifBox","GIPHY_API_KEY","process","useState","GifsSelected","setGifsSelected","confirmButtonstatus","setConfirmButtonstatus","gifsstate","setGifsstate","gifsDataSearched","setGifsDataSearched","clearGifBoxGifs","setClearGifBoxGifs","selectImage","event","newArray","ele","src","target","getAttribute","console","log","push","index","indexOf","splice","length","resetSelectedGifs","document","querySelector","querySelectorAll","forEach","gifsImage","setTimeout","data","isGifsLoaded","setGifsLoaded","gifData","setGifData","setLoadPending","gifSearchText","setGifSearchText","axios","params","api_key","q","limit","then","obj","isGifBoxLoaded","catch","err","isGifBoxVisible","trending","search","classList","add","remove","highlightTrending","highlightSearch","setGifBoxVisible","type","searchGiftext","value","images","fixed_height","url","find","elem","renderGifsSearch","class","setPostLayerGifsSelected","PostComment","setGifBoxLoaded","PostLayerGifsSelected","PostComment_Overlay_status","setPostComment_Overlay_status","placeholder","comm","setComment","setGifsPosted","setTopLayerGifsSelected","postData","PostPosted","gifsArray","gifs","TopLayerGifsSelected","comment","isGifsPosted","gifsrc","width","height","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.fc68b98c.chunk.js","sourcesContent":["/*Use \r\n  Props: \r\n    nav_items={[\r\n            {\r\n              classes: {\r\n                span: [], -- Array of strings\r\n                i: [\"fa-pen\", \"m-sr\"],\r\n              },\r\n              text: \"Compose Post\",\r\n              onClick: ()=>{** Click function **}\r\n            },\r\n          ]}\r\n          crossOnClick={() => props.setPostComment_Overlay_status(\"\")}\r\n\r\n*/\r\n\r\nimport \"../PostComment.scss\";\r\nimport \"./PostComment_Navigation.scss\";\r\n\r\nfunction PostComment_Navigation(props) {\r\n  const convertclassToString = (arr) => {\r\n    const str = arr.join(\" \");\r\n\r\n    return str;\r\n  };\r\n\r\n  const spanArray = props.nav_items.map((nav_item) => {\r\n    return (\r\n      <span\r\n        id={nav_item.id}\r\n        className={`Compose_Post pointer ${convertclassToString(\r\n          nav_item.classes.span\r\n        )}`}\r\n        onClick={nav_item.onClick || function () {}}\r\n      >\r\n        <i className={`fas ${convertclassToString(nav_item.classes.i)}`}></i>\r\n        {nav_item.text}\r\n      </span>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <nav className=\"Navigation\">\r\n      {spanArray}\r\n      <span className=\"cross pa-s light-grey\" onClick={props.crossOnClick}>\r\n        <i className=\"fas fa-times\"></i>\r\n      </span>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default PostComment_Navigation;\r\n","import \"./GifBox.scss\";\r\nimport { useState, useEffect, Fragment } from \"react\";\r\nimport axios from \"axios\";\r\nimport PostComment_Navigation from \"../PostComment/PostComment_Navigation/PostComment_Navigation\";\r\n\r\nconst GifBox = (props) => {\r\n  const GIPHY_API_KEY = process.env.REACT_APP_GIPHY_API_KEY;\r\n\r\n  const [GifsSelected, setGifsSelected] = useState([]);\r\n  const [confirmButtonstatus, setConfirmButtonstatus] = useState(false);\r\n  const [gifsstate, setGifsstate] = useState(\"Trending\");\r\n  const [gifsDataSearched, setGifsDataSearched] = useState([]);\r\n\r\n  if (props.clearGifBoxGifs) {\r\n    props.setClearGifBoxGifs(false);\r\n  }\r\n\r\n  // * ------ Functions------------ *\r\n\r\n  const confirmGifsAction = () => {\r\n    props.setGifBoxVisible(false);\r\n    props.setPostLayerGifsSelected(GifsSelected);\r\n  };\r\n\r\n  const highlightTrending = () => {\r\n    const trending = document.querySelector(\"#Trending\");\r\n    const search = document.querySelector(\"#Search\");\r\n\r\n    trending.classList.add(\"selected\");\r\n    search.classList.remove(\"selected\");\r\n  };\r\n\r\n  const highlightSearch = () => {\r\n    const search = document.querySelector(\"#Search\");\r\n    const trending = document.querySelector(\"#Trending\");\r\n\r\n    search.classList.add(\"selected\");\r\n    trending.classList.remove(\"selected\");\r\n  };\r\n\r\n  /* TODO\r\n   */\r\n\r\n  //   useEffect(() => {\r\n  //     console.log(\"GifsSelected: \", GifsSelected);\r\n  //     props.setTopLayerGifsSelected(GifsSelected);\r\n  //   }, [GifsSelected]);\r\n\r\n  //   console.log(\"GifsSelected: \", GifsSelected);\r\n\r\n  const selectImage = (event) => {\r\n    // console.log(event.target);\r\n    const newArray = GifsSelected.map((ele) => ele);\r\n    const src = event.target.getAttribute(\"src\");\r\n\r\n    if (event.target.className === \"\") {\r\n      event.target.className = \"selected\";\r\n\r\n      console.log(\"src=\", src);\r\n\r\n      newArray.push(src);\r\n    } else {\r\n      event.target.className = \"\";\r\n      const index = newArray.indexOf(src);\r\n      if (index > -1) newArray.splice(index, 1);\r\n    }\r\n\r\n    setGifsSelected(newArray);\r\n    if (newArray.length > 0) {\r\n      setConfirmButtonstatus(true);\r\n    } else {\r\n      setConfirmButtonstatus(false);\r\n    }\r\n  };\r\n\r\n  const resetSelectedGifs = () => {\r\n    setConfirmButtonstatus(false);\r\n    setGifsSelected([]);\r\n    const gifs = document.querySelector(\".gifs\");\r\n    const gifsImages = gifs.querySelectorAll(\"img\");\r\n\r\n    gifsImages.forEach((gifsImage) => {\r\n      gifsImage.className = \"\";\r\n    });\r\n  };\r\n\r\n  if (props.clearGifBoxGifs) {\r\n    setTimeout(() => {\r\n      resetSelectedGifs();\r\n      props.setClearGifBoxGifs(false);\r\n    }, 0);\r\n  }\r\n  // *------------- Rendering Gifs ----------------*\r\n  const renderGifs = (data) => {\r\n    return data.map((ele) => {\r\n      return (\r\n        <img\r\n          className={\r\n            ele.images.fixed_height.url ===\r\n            GifsSelected.find((elem) => elem === ele.images.fixed_height.url)\r\n              ? \"selected\"\r\n              : \"\"\r\n          }\r\n          src={ele.images.fixed_height.url}\r\n          onClick={selectImage}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  const renderGifsSearch = (data) => {\r\n    return data.map((ele) => {\r\n      return (\r\n        <img\r\n          className={\r\n            ele.images.fixed_height.url ===\r\n            GifsSelected.find((elem) => elem === ele.images.fixed_height.url)\r\n              ? \"selected\"\r\n              : \"\"\r\n          }\r\n          src={ele.images.fixed_height.url}\r\n          onClick={selectImage}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  // * --------------- States 2 ----------- *\r\n\r\n  const [isGifsLoaded, setGifsLoaded] = useState(false);\r\n  //   const [isGifsSearchLoaded, setGifsSearchLoaded] = useState(false);\r\n  const [gifData, setGifData] = useState([]);\r\n  const [isLoadPending, setLoadPending] = useState(false);\r\n  const [gifSearchText, setGifSearchText] = useState(\"\");\r\n\r\n  if (gifSearchText.length > 0) {\r\n    axios(\"https://api.giphy.com/v1/gifs/search\", {\r\n      params: {\r\n        api_key: GIPHY_API_KEY,\r\n        q: gifSearchText,\r\n        limit: 30,\r\n      },\r\n    }).then((obj) => {\r\n      console.log(\"obj search: \", obj);\r\n      setGifSearchText(\"\");\r\n      setGifsDataSearched(obj.data.data);\r\n\r\n      //   setGifsSearchLoaded(true);\r\n    });\r\n  }\r\n\r\n  if (props.isGifBoxLoaded && !isGifsLoaded) {\r\n    // const div = document.querySelector(\"#GifBox\");\r\n    // if (div) {\r\n    //   div.className = \"GifBox\";\r\n    //   div.innerHTML = `\r\n    //     <p>Loading</p>\r\n    //     `;\r\n\r\n    axios(\"https://api.giphy.com/v1/gifs/trending\", {\r\n      params: {\r\n        api_key: GIPHY_API_KEY,\r\n        limit: 30,\r\n      },\r\n    })\r\n      // .then((res) => res.json())\r\n      .then((obj) => {\r\n        // setLoadPending(false);\r\n        setGifsLoaded(true);\r\n        setGifData(obj.data.data);\r\n        // setGifBoxVisible(true);\r\n        console.log(\"gifobj: \", obj);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setLoadPending(false);\r\n      });\r\n  }\r\n\r\n  if (props.isGifBoxLoaded && isGifsLoaded && gifData.length > 0) {\r\n    return (\r\n      <div\r\n        id=\"Gifbox\"\r\n        className={`GifBox ${props.isGifBoxVisible ? \"visible\" : \"\"}`}\r\n      >\r\n        <PostComment_Navigation\r\n          nav_items={[\r\n            {\r\n              id: \"Trending\",\r\n              classes: {\r\n                span: [\"fa-line-chart\", \"m-yr\", \"fa\", \"selected\"],\r\n                i: [],\r\n              },\r\n              text: \"Trending\",\r\n              onClick: () => {\r\n                highlightTrending();\r\n                setGifsstate(\"Trending\");\r\n              },\r\n            },\r\n\r\n            {\r\n              id: \"Search\",\r\n              classes: {\r\n                span: [],\r\n                i: [\"fa-search\", \"m-sr\"],\r\n              },\r\n              text: \"Search\",\r\n              onClick: () => {\r\n                highlightSearch();\r\n                setGifsstate(\"Search\");\r\n              },\r\n            },\r\n          ]}\r\n          crossOnClick={() => {\r\n            props.setGifBoxVisible(false);\r\n            resetSelectedGifs();\r\n          }}\r\n        />\r\n        {gifsstate === \"Trending\" ? (\r\n          <Fragment />\r\n        ) : (\r\n          <div className=\"gifSearchBar \">\r\n            <input className=\"m-r\" id=\"searchGiftext\" type=\"search\" />\r\n            <button\r\n              className=\"pa-s pointer gifSearchBar_button\"\r\n              onClick={() => {\r\n                const searchGiftext = document.querySelector(\"#searchGiftext\");\r\n                setGifSearchText(searchGiftext.value);\r\n              }}\r\n            >\r\n              <i className=\"fas fa-search\"></i>\r\n            </button>\r\n          </div>\r\n        )}\r\n        <div\r\n          className={`gifs ${\r\n            gifsstate === \"Trending\"\r\n              ? \"gifs_max-height-trending\"\r\n              : \"gifs_max-height-search\"\r\n          }`}\r\n        >\r\n          {gifsstate === \"Trending\" ? (\r\n            renderGifs(gifData)\r\n          ) : (\r\n            <Fragment>{renderGifsSearch(gifsDataSearched)}</Fragment>\r\n          )}\r\n        </div>\r\n        <div class=\"confirmSelectGif\">\r\n          <button\r\n            className={`confirmSelectGif_button pointer ${\r\n              confirmButtonstatus ? \"enabled\" : \"\"\r\n            }`}\r\n            onClick={() => {\r\n              confirmButtonstatus\r\n                ? confirmGifsAction()\r\n                : props.setGifBoxVisible(true);\r\n            }}\r\n          >\r\n            OK\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (props.isGifBoxLoaded && isLoadPending) {\r\n    <div id=\"Gifbox\" className=\"GifBox\">\r\n      <p class=\"Loading\">Loading</p>\r\n    </div>;\r\n  }\r\n\r\n  return (\r\n    <div id=\"Gifbox\">\r\n      {/* <div className=\"gifs\">{() => renderGifs(d)}</div>  */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifBox;\r\n","import { directive } from \"@babel/types\";\r\nimport React from \"react\";\r\nimport \"./PostComment.scss\";\r\nimport GifBox from \"../GifBox/GifBox\";\r\nimport { useState } from \"react\";\r\nimport PostComment_Navigation from \"./PostComment_Navigation/PostComment_Navigation\";\r\n\r\nfunction PostComment(props) {\r\n  const [isGifBoxLoaded, setGifBoxLoaded] = useState(false);\r\n  const [isGifBoxVisible, setGifBoxVisible] = useState(true);\r\n  const [PostLayerGifsSelected, setPostLayerGifsSelected] = useState([]);\r\n  const [clearGifBoxGifs, setClearGifBoxGifs] = useState(false);\r\n\r\n  const postData = () => {\r\n    const comm = document\r\n      .querySelector(\".writeSection_type\")\r\n      .querySelector(\"textarea\");\r\n    props.setComment(comm.value);\r\n    props.setPostComment_Overlay_status(false);\r\n    props.setGifsPosted(true);\r\n    props.setTopLayerGifsSelected(PostLayerGifsSelected);\r\n    setPostLayerGifsSelected([]);\r\n    setClearGifBoxGifs(true);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`PostComment_Overlay ${\r\n        props.PostComment_Overlay_status ? \"active\" : \"\"\r\n      }`}\r\n    >\r\n      <div className={`PostComment ${props.PostComment_Overlay_status}`}>\r\n        <PostComment_Navigation\r\n          nav_items={[\r\n            {\r\n              id: \"Compose_Post\",\r\n              classes: {\r\n                span: [],\r\n                i: [\"fa-pen\", \"m-sr\"],\r\n              },\r\n              text: \"Compose Post\",\r\n            },\r\n          ]}\r\n          crossOnClick={() => props.setPostComment_Overlay_status(\"\")}\r\n        />\r\n        <div className=\"writeSection\">\r\n          <div className=\"writeSection_photo col-15\">\r\n            <img src=\"images/whatsapp profile pic.jpg\"></img>\r\n          </div>\r\n          <div class=\"writeSection_type col-85\">\r\n            <textarea placeholder=\"Write something here\"></textarea>\r\n          </div>\r\n        </div>\r\n        <div className=\"features\">\r\n          <div\r\n            className=\"gif\"\r\n            onClick={() => {\r\n              setGifBoxLoaded(true);\r\n              setGifBoxVisible(true);\r\n            }}\r\n          >\r\n            <span className=\"gif_image\">\r\n              <img src=\"images/gif icon.PNG\" />\r\n            </span>\r\n            <span className=\"gif_text\"> GIF</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"activeButtons \">\r\n          <button\r\n            className=\"postButton\"\r\n            onClick={() => {\r\n              postData();\r\n              //   console.log(\"PostLayerGifsSelected: \", PostLayerGifsSelected);\r\n            }}\r\n          >\r\n            Post\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <GifBox\r\n        isGifBoxLoaded={isGifBoxLoaded}\r\n        setGifBoxLoaded={setGifBoxLoaded}\r\n        isGifBoxVisible={isGifBoxVisible}\r\n        setGifBoxVisible={setGifBoxVisible}\r\n        setPostLayerGifsSelected={setPostLayerGifsSelected}\r\n        clearGifBoxGifs={clearGifBoxGifs}\r\n        setClearGifBoxGifs={setClearGifBoxGifs}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostComment;\r\n","import \"./PostPosted.scss\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction PostPosted(props) {\r\n  const gifs = props.TopLayerGifsSelected;\r\n  const comment = props.comment;\r\n\r\n  let gifsArray;\r\n  if (props.isGifsPosted) {\r\n    gifsArray = gifs.map((gifsrc) => {\r\n      return <img src={gifsrc} width=\"100\" height=\"100\" />;\r\n    });\r\n  } else gifsArray = \"\";\r\n\r\n  return (\r\n    <div\r\n      className={`PostPosted ${\r\n        gifs.length > 0 || comment.length > 0 ? \"active\" : \"\"\r\n      }`}\r\n    >\r\n      <div className=\"commentPosted col-50\">\r\n        <pre>{comment}</pre>\r\n      </div>\r\n      <div className=\"gifsPosted col-50\">{gifsArray}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostPosted;\r\n","// import logo from './logo.svg';\r\nimport \"./App.css\";\r\nimport \"./test.scss\";\r\nimport \"./App.scss\";\r\nimport PostComment from \"./PostComment/PostComment\";\r\nimport PostPosted from \"./PostPosted/PostPosted\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction App() {\r\n  const [PostComment_Overlay_status, setPostComment_Overlay_status] =\r\n    useState(\"\");\r\n  const [TopLayerGifsSelected, setTopLayerGifsSelected] = useState([]);\r\n  const [comment, setComment] = useState(\"\");\r\n  const [isGifsPosted, setGifsPosted] = useState(false);\r\n\r\n  // console.log(\"TopLayerGifsSelected: \", TopLayerGifsSelected);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"main_heading\">Post Comment and Gifs</h1>\r\n      <button\r\n        className=\"enablePostComment\"\r\n        onClick={() => {\r\n          setPostComment_Overlay_status(\"active\");\r\n          const textarea = document\r\n            .querySelector(\".writeSection_type\")\r\n            .querySelector(\"textarea\");\r\n          textarea.value = \"\";\r\n          // setComment(\"\");\r\n        }}\r\n      >\r\n        <i className=\"fas fa-comments\"></i>\r\n      </button>\r\n      <PostComment\r\n        PostComment_Overlay_status={PostComment_Overlay_status}\r\n        setPostComment_Overlay_status={setPostComment_Overlay_status}\r\n        setTopLayerGifsSelected={setTopLayerGifsSelected}\r\n        setComment={setComment}\r\n        setGifsPosted={setGifsPosted}\r\n      />\r\n      <div className=\"breakLines\"></div>\r\n      <h2>Posts</h2>\r\n      <PostPosted\r\n        TopLayerGifsSelected={TopLayerGifsSelected}\r\n        comment={comment}\r\n        isGifsPosted={isGifsPosted}\r\n      />\r\n\r\n      {/* <iframe\r\n        src=\"https://giphy.com/embed/Q73lYjzETOBZhYxpOL\"\r\n        width=\"480\"\r\n        height=\"462\"\r\n        frameBorder=\"0\"\r\n        class=\"giphy-embed\"\r\n        allowFullScreen\r\n      ></iframe> */}\r\n\r\n      {/* <p style={{ position: \"fixed\", bottom: \"2rem\" }}>Lorem ipsum</p> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n// import reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <App />,\r\n  // </React.StrictMode>\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}